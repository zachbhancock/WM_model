initialize() {
    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq();
    
    defineConstant("W", 25.0);  // width of the simulated area 
    defineConstant("SIGMA", 1.0); // interaction width
    defineGlobal("K", 10);  // carrying-capacity density
	 catn(c("WORKINGDIR =", WORKINGDIR));
	 catn(c("n =", n));
	 catn(c("TREEFILE =", TREEFILE));    
    catn(c("SIGMA =", SIGMA));
    catn(c("K =", K));
    defineConstant("G", 1e8);  // genome length
    defineConstant("FECUN", 2); // mean fecundity

    initializeMutationType("m1", 0.5, "g", 0.0, 2);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, G-1);
    initializeMutationRate(0.0);
    initializeRecombinationRate(1e-9);
    
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3*SIGMA);
    i1.setInteractionFunction("n", 1.0, SIGMA); //maximum is rescaled by localPopulationDensity()
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3*SIGMA);
    i2.setInteractionFunction("n", 1/(2*PI*SIGMA^2), SIGMA);
}

reproduction() {
	mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        nOff = rpois(1, FECUN);
        for (i in seqLen(nOff)) {
           pos = individual.spatialPosition + rnorm(2, 0, SIGMA);
           offspring = p1.addCrossed(individual, mate);
           offspring.setSpatialPosition(p1.pointReflected(pos));
          	}
        }
        return;
        }
        
1 early() {
    sim.addSubpop("p1", asInteger(K * W * W));
    p1.setSpatialBounds(c(0, 0, W, W));
    for (ind in p1.individuals) {
        ind.setSpatialPosition(p1.pointUniform());
        ind.tag = 0;
    }
    i1.evaluate(sim.subpopulations);

}

early() {
    i1.evaluate(sim.subpopulations);
    inds = p1.individuals;
	 inds[inds.age >= 1].fitnessScaling = 0.0;
    competition = i1.localPopulationDensity(inds[inds.age < 1]); 
    inds[inds.age < 1].fitnessScaling = K / competition; 
    }  

1: late() {
   // to be ready for mate choice
   sim.treeSeqRememberIndividuals(sim.subpopulations.individuals, permanent=F);
   i2.evaluate(sim.subpopulations);
}

50000 late(){

catn("Reached generation 50k");
outname= WORKINGDIR+TREEFILE;
writeFile(outname + "_density_1", paste(p1.individualCount / 625));
}

100000 late(){

defineGlobal("K", 5);}


10008 late(){
	outname= WORKINGDIR+TREEFILE;
	catn(outname);
	sim.treeSeqOutput(outname);
	writeFile(outname + "_popsize", paste(p1.individualCount));
	writeFile(outname + "_time", paste("0.1"));
	writeFile(outname + "_density_1", paste(p1.individualCount / 625));
	sim.simulationFinished();
	}